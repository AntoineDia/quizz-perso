{"remainingRequest":"C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Tointoin\\code\\lc\\quizz-personality\\src\\components\\q.vue?vue&type=template&id=550e3011&","dependencies":[{"path":"C:\\Users\\Tointoin\\code\\lc\\quizz-personality\\src\\components\\q.vue","mtime":1569925421962},{"path":"C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _vm._l(_vm.questionsInAllLangs, function(questionsByID, qId) {\n        return _c(\n          \"div\",\n          { key: questionsByID[qId], attrs: { id: \"questions\" } },\n          [\n            _c(\"div\", { staticClass: \"inline questionHead\" }, [\n              _c(\"label\", [_c(\"b\", [_vm._v(\"Question \" + _vm._s(qId + 1))])])\n            ]),\n            _c(\"div\", { staticClass: \"questionRow\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"questionsInputs\" },\n                _vm._l(questionsByID, function(question, lang) {\n                  return _c(\n                    \"div\",\n                    {\n                      key: lang,\n                      staticClass: \"questionTitle\",\n                      class: [\n                        !_vm.translationMode && lang !== _vm.langs[0]\n                          ? \"height0\"\n                          : \"\"\n                      ]\n                    },\n                    [\n                      _c(\n                        \"div\",\n                        {\n                          staticClass: \"tileLang gluedRigth\",\n                          class: [lang === _vm.langs[0] ? \"blue\" : \"\"],\n                          on: {\n                            click: function($event) {\n                              return $event.target.nextElementSibling.focus()\n                            }\n                          }\n                        },\n                        [_vm._v(_vm._s(lang))]\n                      ),\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: question.question,\n                            expression: \"question.question\"\n                          }\n                        ],\n                        staticClass: \"inputQuestion gluedLeft\",\n                        attrs: { type: \"text\", placeholder: \"What to ask?\" },\n                        domProps: { value: question.question },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(question, \"question\", $event.target.value)\n                          }\n                        }\n                      })\n                    ]\n                  )\n                }),\n                0\n              ),\n              _c(\"div\", {\n                staticClass: \"editAll\",\n                on: {\n                  click: function($event) {\n                    _vm.editionMode = !_vm.editionMode\n                  }\n                }\n              }),\n              _c(\n                \"div\",\n                _vm._l(questionsByID, function(question, lang) {\n                  return _c(\n                    \"div\",\n                    {\n                      key: lang,\n                      staticClass: \"buttonsHolder\",\n                      class: [\n                        !_vm.translationMode && lang !== _vm.langs[0]\n                          ? \"height0\"\n                          : \"\"\n                      ]\n                    },\n                    [\n                      _c(\"button\", {\n                        staticClass: \"edit delete\",\n                        class: _vm.visibilityButton(lang),\n                        on: {\n                          click: function($event) {\n                            return _vm.removeQuestion(question.id)\n                          }\n                        }\n                      }),\n                      _c(\"button\", {\n                        staticClass: \"edit translation\",\n                        class: [\n                          _vm.visibilityButton(lang),\n                          _vm.translationMode ? \"active\" : \"\"\n                        ],\n                        on: {\n                          click: function($event) {\n                            _vm.translationMode = !_vm.translationMode\n                          }\n                        }\n                      })\n                    ]\n                  )\n                }),\n                0\n              )\n            ]),\n            _c(\n              \"div\",\n              { staticClass: \"questionParams\" },\n              _vm._l(questionsByID, function(question, lang, i) {\n                return _c(\n                  \"div\",\n                  {\n                    key: i,\n                    staticClass: \"inline params\",\n                    class: [\n                      lang === _vm.langs[0] ? \"\" : \"hidden\",\n                      _vm.editionMode ? \"\" : \"height0\"\n                    ]\n                  },\n                  [\n                    _c(\n                      \"div\",\n                      [\n                        _c(\"label\", [_vm._v(\"Answers redirect\")]),\n                        _c(\"Redirect\", {\n                          attrs: {\n                            qId: question.id,\n                            holder: question,\n                            lang: lang,\n                            config: _vm.config\n                          }\n                        }),\n                        _c(\"label\", [_vm._v(\"Answer layout\")]),\n                        _c(\"div\", { staticClass: \"dual\" }, [\n                          _c(\"span\", { staticClass: \"leftLabel\" }, [\n                            _vm._v(\"Cols\")\n                          ]),\n                          _c(\"input\", {\n                            directives: [\n                              {\n                                name: \"model\",\n                                rawName: \"v-model.number\",\n                                value: question.col,\n                                expression: \"question.col\",\n                                modifiers: { number: true }\n                              }\n                            ],\n                            attrs: { type: \"number\", min: \"1\" },\n                            domProps: { value: question.col },\n                            on: {\n                              input: [\n                                function($event) {\n                                  if ($event.target.composing) {\n                                    return\n                                  }\n                                  _vm.$set(\n                                    question,\n                                    \"col\",\n                                    _vm._n($event.target.value)\n                                  )\n                                },\n                                function($event) {\n                                  return _vm.updateProp(\"question\", \"col\", qId)\n                                }\n                              ],\n                              blur: function($event) {\n                                return _vm.$forceUpdate()\n                              }\n                            }\n                          }),\n                          _c(\"span\", { staticClass: \"leftLabel\" }, [\n                            _vm._v(\"Rows\")\n                          ]),\n                          _c(\"input\", {\n                            directives: [\n                              {\n                                name: \"model\",\n                                rawName: \"v-model.number\",\n                                value: question.row,\n                                expression: \"question.row\",\n                                modifiers: { number: true }\n                              }\n                            ],\n                            attrs: { type: \"number\", min: \"1\" },\n                            domProps: { value: question.row },\n                            on: {\n                              input: [\n                                function($event) {\n                                  if ($event.target.composing) {\n                                    return\n                                  }\n                                  _vm.$set(\n                                    question,\n                                    \"row\",\n                                    _vm._n($event.target.value)\n                                  )\n                                },\n                                function($event) {\n                                  return _vm.updateProp(\"question\", \"row\", qId)\n                                }\n                              ],\n                              blur: function($event) {\n                                return _vm.$forceUpdate()\n                              }\n                            }\n                          })\n                        ]),\n                        _c(\"label\", [_vm._v(\"Number of choices\")]),\n                        _c(\"div\", { staticClass: \"dual\" }, [\n                          _c(\"span\", { staticClass: \"leftLabel\" }, [\n                            _vm._v(\"Max\")\n                          ]),\n                          _c(\"input\", {\n                            directives: [\n                              {\n                                name: \"model\",\n                                rawName: \"v-model.number\",\n                                value: question.max,\n                                expression: \"question.max\",\n                                modifiers: { number: true }\n                              }\n                            ],\n                            attrs: { type: \"number\", min: \"1\" },\n                            domProps: { value: question.max },\n                            on: {\n                              input: [\n                                function($event) {\n                                  if ($event.target.composing) {\n                                    return\n                                  }\n                                  _vm.$set(\n                                    question,\n                                    \"max\",\n                                    _vm._n($event.target.value)\n                                  )\n                                },\n                                function($event) {\n                                  return _vm.updateProp(\"question\", \"max\", qId)\n                                }\n                              ],\n                              blur: function($event) {\n                                return _vm.$forceUpdate()\n                              }\n                            }\n                          }),\n                          _c(\"span\", { staticClass: \"leftLabel\" }, [\n                            _vm._v(\"Min\")\n                          ]),\n                          _c(\"input\", {\n                            directives: [\n                              {\n                                name: \"model\",\n                                rawName: \"v-model.number\",\n                                value: question.min,\n                                expression: \"question.min\",\n                                modifiers: { number: true }\n                              }\n                            ],\n                            attrs: { type: \"number\", min: \"1\" },\n                            domProps: { value: question.min },\n                            on: {\n                              input: [\n                                function($event) {\n                                  if ($event.target.composing) {\n                                    return\n                                  }\n                                  _vm.$set(\n                                    question,\n                                    \"min\",\n                                    _vm._n($event.target.value)\n                                  )\n                                },\n                                function($event) {\n                                  return _vm.updateProp(\"question\", \"min\", qId)\n                                }\n                              ],\n                              blur: function($event) {\n                                return _vm.$forceUpdate()\n                              }\n                            }\n                          })\n                        ])\n                      ],\n                      1\n                    )\n                  ]\n                )\n              }),\n              0\n            ),\n            _c(\"div\", { staticClass: \"answerRow\" }, [\n              _c(\"span\", { staticClass: \"optionsHead\" }, [_vm._v(\"Options\")]),\n              _c(\"button\", {\n                staticClass: \"optionEdit\",\n                class: _vm.answerEdition ? \"active\" : \"\",\n                on: {\n                  click: function($event) {\n                    _vm.answerEdition = !_vm.answerEdition\n                  }\n                }\n              }),\n              _c(\n                \"div\",\n                [\n                  _vm._l(_vm.optionByQuestion(qId), function(options, optId) {\n                    return _c(\n                      \"div\",\n                      {\n                        key: optId,\n                        staticClass: \"optionsRows\",\n                        class: !_vm.answerEdition ? \"height0\" : \"\"\n                      },\n                      [\n                        _c(\"div\", { staticClass: \"optionsTitle\" }, [\n                          _vm._v(\"Option \" + _vm._s(parseInt(optId) + 1))\n                        ]),\n                        _c(\"button\", {\n                          staticClass: \"edit delete optionDelete\",\n                          on: {\n                            click: function($event) {\n                              return _vm.removeOption(qId, optId)\n                            }\n                          }\n                        }),\n                        _vm._l(options, function(option, lang) {\n                          return _c(\n                            \"div\",\n                            { key: lang + optId, staticClass: \"optionsHolder\" },\n                            [\n                              lang === _vm.langs[0]\n                                ? _c(\"div\", [\n                                    _c(\"label\", [\n                                      _vm._v(\"Illustration source\")\n                                    ]),\n                                    _c(\"input\", {\n                                      directives: [\n                                        {\n                                          name: \"model\",\n                                          rawName: \"v-model\",\n                                          value: option.src,\n                                          expression: \"option.src\"\n                                        }\n                                      ],\n                                      attrs: {\n                                        type: \"text\",\n                                        placeholder:\n                                          \"example: https://picsum.photos/200/300\"\n                                      },\n                                      domProps: { value: option.src },\n                                      on: {\n                                        input: [\n                                          function($event) {\n                                            if ($event.target.composing) {\n                                              return\n                                            }\n                                            _vm.$set(\n                                              option,\n                                              \"src\",\n                                              $event.target.value\n                                            )\n                                          },\n                                          function($event) {\n                                            return _vm.updateProp(\n                                              qId,\n                                              \"src\",\n                                              optId\n                                            )\n                                          }\n                                        ]\n                                      }\n                                    })\n                                  ])\n                                : _vm._e(),\n                              lang === _vm.langs[0]\n                                ? _c(\"div\", [\n                                    _c(\"label\", [_vm._v(\"Tags\")]),\n                                    _c(\"input\", {\n                                      attrs: {\n                                        type: \"text\",\n                                        placeholder: \"Separate each by a comma\"\n                                      },\n                                      domProps: {\n                                        value: option.tags.join(\", \")\n                                      },\n                                      on: {\n                                        input: function($event) {\n                                          ;[\n                                            _vm.parseTags(\n                                              option,\n                                              $event.target.value\n                                            ),\n                                            _vm.updateProp(qId, \"tags\", optId)\n                                          ]\n                                        }\n                                      }\n                                    })\n                                  ])\n                                : _vm._e(),\n                              lang === _vm.langs[0]\n                                ? _c(\n                                    \"div\",\n                                    [\n                                      _c(\"label\", [_vm._v(\"Answers redirect\")]),\n                                      _c(\"Redirect\", {\n                                        staticClass: \"redirectInOptions\",\n                                        attrs: {\n                                          qId: questionsByID()[_vm.langs[0]].id,\n                                          holder: option,\n                                          lang: lang,\n                                          config: _vm.config\n                                        }\n                                      })\n                                    ],\n                                    1\n                                  )\n                                : _vm._e(),\n                              lang === _vm.langs[0]\n                                ? _c(\"label\", [_vm._v(\"Text\")])\n                                : _vm._e(),\n                              _c(\n                                \"div\",\n                                {\n                                  staticClass: \"optionTextHolder\",\n                                  class:\n                                    _vm.translationMode || lang === _vm.langs[0]\n                                      ? \"\"\n                                      : \"height0\"\n                                },\n                                [\n                                  _c(\n                                    \"div\",\n                                    {\n                                      staticClass: \"tileLang\",\n                                      class:\n                                        lang === _vm.langs[0] ? \"blue\" : \"\",\n                                      on: {\n                                        click: function($event) {\n                                          return $event.target.nextElementSibling.focus()\n                                        }\n                                      }\n                                    },\n                                    [_vm._v(_vm._s(lang))]\n                                  ),\n                                  _c(\"input\", {\n                                    directives: [\n                                      {\n                                        name: \"model\",\n                                        rawName: \"v-model\",\n                                        value: option.text,\n                                        expression: \"option.text\"\n                                      }\n                                    ],\n                                    attrs: {\n                                      type: \"text\",\n                                      placeholder: \"Illustration subtitle\"\n                                    },\n                                    domProps: { value: option.text },\n                                    on: {\n                                      input: function($event) {\n                                        if ($event.target.composing) {\n                                          return\n                                        }\n                                        _vm.$set(\n                                          option,\n                                          \"text\",\n                                          $event.target.value\n                                        )\n                                      }\n                                    }\n                                  })\n                                ]\n                              )\n                            ]\n                          )\n                        })\n                      ],\n                      2\n                    )\n                  }),\n                  _vm.answerEdition\n                    ? _c(\n                        \"button\",\n                        {\n                          staticClass: \"add\",\n                          class: _vm.answerEdition ? \"\" : \"height0\",\n                          on: {\n                            click: function($event) {\n                              return _vm.addOption(qId)\n                            }\n                          }\n                        },\n                        [_vm._v(\"Add option\")]\n                      )\n                    : _vm._e()\n                ],\n                2\n              )\n            ])\n          ]\n        )\n      }),\n      _c(\"div\", [\n        _c(\"button\", { staticClass: \"add\", on: { click: _vm.addQuestion } }, [\n          _vm._v(\"Add question\")\n        ])\n      ])\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}