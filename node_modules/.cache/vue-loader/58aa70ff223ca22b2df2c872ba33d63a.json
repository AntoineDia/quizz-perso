{"remainingRequest":"C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Tointoin\\Documents\\code\\h-s\\components\\tags.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Tointoin\\Documents\\code\\h-s\\components\\tags.vue","mtime":1571304905438},{"path":"C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: 'Tags',\r\n  props: ['tags','langs','questions','tagByid'],\r\n  data() {\r\n    return {\r\n      tag: '',\r\n      nextTagId : 2,\r\n    }\r\n  },\r\n  watch: {\r\n    tags(){\r\n      this.tags.forEach(function(tag){\r\n        var found = this.tagByid.find(function(tagObj){\r\n          return tag === tagObj.name\r\n        }.bind(this))\r\n        if(!found){\r\n          this.tagByid.forEach(function(tagObj){\r\n            this.nextTagId <= tagObj.id ?\r\n              this.nextTagId = tagObj.id + 1 : ''\r\n          }.bind(this),0)\r\n          this.tagByid.push({\r\n            id: this.nextTagId,\r\n            name: tag\r\n          })\r\n        }\r\n      }.bind(this))\r\n      this.tagByid.forEach(function(tagObj,i){\r\n        var found = this.tags.find(function(tag){\r\n          return tag === tagObj.name\r\n        })\r\n        if(!found){\r\n          this.tagByid.splice(i,1)\r\n        }\r\n      }.bind(this))\r\n      this.$emit('tag-update',this.tagByid)\r\n    }\r\n  },\r\n  methods: {\r\n    addTag(){\r\n      this.tags.push(this.tag)\r\n      this.tag = ''\r\n    },\r\n    confirmation: function(tag){\r\n      if(confirm('Are you sure you want to delete ' + tag +'?')) {\r\n        var tagIndex = this.tagByid.find(function(tagObj){\r\n          return tag === tagObj.name\r\n        })\r\n        tagIndex = tagIndex.id\r\n        this.langs.forEach(lang => {\r\n          this.questions[lang].forEach(question => {\r\n            question.answers.forEach(answer => {\r\n              var tags = answer.tags\r\n              console.log(tags, tags.indexOf(tagIndex))\r\n              ~tags.indexOf(tagIndex) ?\r\n                answer.tags.splice(tags.indexOf(tagIndex),1) : ''\r\n            })\r\n          })\r\n        })\r\n        this.tags.splice(tagIndex, 1)\r\n      }\r\n    },\r\n    saveJson(){\r\n      var json = {\r\n        tags: this.tags,\r\n        question: this.questions\r\n      }\r\n      console.log(json)\r\n    }\r\n  },\r\n}\r\n  ",{"version":3,"sources":["tags.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"tags.vue","sourceRoot":"components","sourcesContent":["<template>\r\n<div>\r\n\r\n  <div class=\"hs-tags\">\r\n    <div class=\"hs-tagsHead\">\r\n      <i class=\"hs-tagIcon\"\r\n        @click=\"saveJson()\"\r\n      ></i>\r\n      <span>Tags</span>\r\n    </div>\r\n    <ul class=\"hs-tagsList\">\r\n      <li v-for=\"tag in tags\" :key=\"tag\"\r\n        @click=\"confirmation(tag)\"\r\n      >{{tag}} <a></a></li>\r\n    </ul>\r\n\r\n    <div class=\"hs-inputRow\">\r\n      <input\r\n        type=\"text\"\r\n        v-model=\"tag\"\r\n        @keyup.enter=\" tag !== '' && !~tags.indexOf(tag) ? addTag() : ''\"\r\n        placeholder=\"Tag name\"\r\n      >\r\n      <label\r\n        @click=\" tag !== '' && !~tags.indexOf(tag) ? addTag() : ''\"\r\n      >Add</label>\r\n    </div>\r\n\r\n  </div>\r\n\r\n\r\n\r\n</div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: 'Tags',\r\n  props: ['tags','langs','questions','tagByid'],\r\n  data() {\r\n    return {\r\n      tag: '',\r\n      nextTagId : 2,\r\n    }\r\n  },\r\n  watch: {\r\n    tags(){\r\n      this.tags.forEach(function(tag){\r\n        var found = this.tagByid.find(function(tagObj){\r\n          return tag === tagObj.name\r\n        }.bind(this))\r\n        if(!found){\r\n          this.tagByid.forEach(function(tagObj){\r\n            this.nextTagId <= tagObj.id ?\r\n              this.nextTagId = tagObj.id + 1 : ''\r\n          }.bind(this),0)\r\n          this.tagByid.push({\r\n            id: this.nextTagId,\r\n            name: tag\r\n          })\r\n        }\r\n      }.bind(this))\r\n      this.tagByid.forEach(function(tagObj,i){\r\n        var found = this.tags.find(function(tag){\r\n          return tag === tagObj.name\r\n        })\r\n        if(!found){\r\n          this.tagByid.splice(i,1)\r\n        }\r\n      }.bind(this))\r\n      this.$emit('tag-update',this.tagByid)\r\n    }\r\n  },\r\n  methods: {\r\n    addTag(){\r\n      this.tags.push(this.tag)\r\n      this.tag = ''\r\n    },\r\n    confirmation: function(tag){\r\n      if(confirm('Are you sure you want to delete ' + tag +'?')) {\r\n        var tagIndex = this.tagByid.find(function(tagObj){\r\n          return tag === tagObj.name\r\n        })\r\n        tagIndex = tagIndex.id\r\n        this.langs.forEach(lang => {\r\n          this.questions[lang].forEach(question => {\r\n            question.answers.forEach(answer => {\r\n              var tags = answer.tags\r\n              console.log(tags, tags.indexOf(tagIndex))\r\n              ~tags.indexOf(tagIndex) ?\r\n                answer.tags.splice(tags.indexOf(tagIndex),1) : ''\r\n            })\r\n          })\r\n        })\r\n        this.tags.splice(tagIndex, 1)\r\n      }\r\n    },\r\n    saveJson(){\r\n      var json = {\r\n        tags: this.tags,\r\n        question: this.questions\r\n      }\r\n      console.log(json)\r\n    }\r\n  },\r\n}\r\n  </script>"]}]}