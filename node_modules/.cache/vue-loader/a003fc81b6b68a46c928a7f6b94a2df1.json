{"remainingRequest":"C:\\Users\\Tointoin\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Tointoin\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Tointoin\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Tointoin\\Documents\\code\\quizz-personality\\src\\components\\q.vue?vue&type=template&id=550e3011&","dependencies":[{"path":"C:\\Users\\Tointoin\\Documents\\code\\quizz-personality\\src\\components\\q.vue","mtime":1569876990800},{"path":"C:\\Users\\Tointoin\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Tointoin\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Tointoin\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Tointoin\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _vm._l(_vm.questionsInAllLangs, function(questionsByID, qId) {\n        return _c(\n          \"div\",\n          { key: questionsByID[qId], attrs: { id: \"questions\" } },\n          [\n            _c(\"div\", { staticClass: \"inline\" }, [\n              _c(\"label\", [_c(\"b\", [_vm._v(\"Question \" + _vm._s(qId + 1))])]),\n              _c(\n                \"div\",\n                {\n                  staticClass: \"tileLang\",\n                  staticStyle: { visibility: \"hidden\" }\n                },\n                [_vm._v(\"hh\")]\n              )\n            ]),\n            _c(\"div\", { staticClass: \"questionRow\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"questionsInputs\" },\n                _vm._l(questionsByID, function(question, lang) {\n                  return _c(\n                    \"div\",\n                    {\n                      key: lang,\n                      staticClass: \"questionTitle\",\n                      class: [\n                        !_vm.translationMode && lang !== _vm.langs[0]\n                          ? \"height0\"\n                          : \"\"\n                      ]\n                    },\n                    [\n                      _c(\n                        \"div\",\n                        {\n                          staticClass: \"tileLang gluedRigth\",\n                          class: [lang === _vm.langs[0] ? \"blue\" : \"\"],\n                          on: {\n                            click: function($event) {\n                              return $event.target.nextElementSibling.focus()\n                            }\n                          }\n                        },\n                        [_vm._v(_vm._s(lang))]\n                      ),\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: question.question,\n                            expression: \"question.question\"\n                          }\n                        ],\n                        staticClass: \"inputQuestion gluedLeft\",\n                        attrs: { type: \"text\", placeholder: \"What to ask?\" },\n                        domProps: { value: question.question },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(question, \"question\", $event.target.value)\n                          }\n                        }\n                      })\n                    ]\n                  )\n                }),\n                0\n              ),\n              _c(\"div\", {\n                staticClass: \"editAll\",\n                on: {\n                  click: function($event) {\n                    _vm.editionMode = !_vm.editionMode\n                  }\n                }\n              }),\n              _c(\n                \"div\",\n                _vm._l(questionsByID, function(question, lang) {\n                  return _c(\n                    \"div\",\n                    {\n                      key: lang,\n                      staticClass: \"buttonsHolder\",\n                      class: [\n                        !_vm.translationMode && lang !== _vm.langs[0]\n                          ? \"height0\"\n                          : \"\"\n                      ]\n                    },\n                    [\n                      _c(\"button\", {\n                        staticClass: \"edit delete\",\n                        class: _vm.visibilityButton(lang),\n                        on: {\n                          click: function($event) {\n                            return _vm.removeQuestion(question.id)\n                          }\n                        }\n                      }),\n                      _c(\"button\", {\n                        staticClass: \"edit translation\",\n                        class: [\n                          _vm.visibilityButton(lang),\n                          _vm.translationMode ? \"active\" : \"\"\n                        ],\n                        on: {\n                          click: function($event) {\n                            _vm.translationMode = !_vm.translationMode\n                          }\n                        }\n                      })\n                    ]\n                  )\n                }),\n                0\n              )\n            ]),\n            _c(\n              \"div\",\n              { staticClass: \"questionParams\" },\n              _vm._l(questionsByID, function(question, lang, i) {\n                return _c(\n                  \"div\",\n                  {\n                    key: i,\n                    staticClass: \"inline params\",\n                    class: [\n                      lang === _vm.langs[0] ? \"\" : \"hidden\",\n                      _vm.editionMode ? \"\" : \"height0\"\n                    ]\n                  },\n                  [\n                    _c(\n                      \"div\",\n                      {\n                        staticClass: \"tileLang\",\n                        staticStyle: { visibility: \"hidden\" }\n                      },\n                      [_vm._v(\"hh\")]\n                    ),\n                    _c(\"div\", [\n                      _c(\"label\", [_vm._v(\"Answers redirect\")]),\n                      _c(\"input\", {\n                        attrs: { type: \"text\", placeholder: \"Next question\" }\n                      }),\n                      _c(\"label\", [_vm._v(\"Answer layout\")]),\n                      _c(\"div\", { staticClass: \"dual\" }, [\n                        _c(\"span\", { staticClass: \"leftLabel\" }, [\n                          _vm._v(\"Cols\")\n                        ]),\n                        _c(\"input\", {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: question.col,\n                              expression: \"question.col\"\n                            }\n                          ],\n                          attrs: { type: \"number\", min: \"1\" },\n                          domProps: { value: question.col },\n                          on: {\n                            input: function($event) {\n                              if ($event.target.composing) {\n                                return\n                              }\n                              _vm.$set(question, \"col\", $event.target.value)\n                            }\n                          }\n                        }),\n                        _c(\"span\", { staticClass: \"leftLabel\" }, [\n                          _vm._v(\"Rows\")\n                        ]),\n                        _c(\"input\", {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: question.row,\n                              expression: \"question.row\"\n                            }\n                          ],\n                          attrs: { type: \"number\", min: \"1\" },\n                          domProps: { value: question.row },\n                          on: {\n                            input: function($event) {\n                              if ($event.target.composing) {\n                                return\n                              }\n                              _vm.$set(question, \"row\", $event.target.value)\n                            }\n                          }\n                        })\n                      ]),\n                      _c(\"label\", [_vm._v(\"Number of choices\")]),\n                      _c(\"div\", { staticClass: \"dual\" }, [\n                        _c(\"span\", { staticClass: \"leftLabel\" }, [\n                          _vm._v(\"Max\")\n                        ]),\n                        _c(\"input\", {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: question.max,\n                              expression: \"question.max\"\n                            }\n                          ],\n                          attrs: { type: \"number\", min: \"1\" },\n                          domProps: { value: question.max },\n                          on: {\n                            input: function($event) {\n                              if ($event.target.composing) {\n                                return\n                              }\n                              _vm.$set(question, \"max\", $event.target.value)\n                            }\n                          }\n                        }),\n                        _c(\"span\", { staticClass: \"leftLabel\" }, [\n                          _vm._v(\"Min\")\n                        ]),\n                        _c(\"input\", {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: question.min,\n                              expression: \"question.min\"\n                            }\n                          ],\n                          attrs: { type: \"number\", min: \"1\" },\n                          domProps: { value: question.min },\n                          on: {\n                            input: function($event) {\n                              if ($event.target.composing) {\n                                return\n                              }\n                              _vm.$set(question, \"min\", $event.target.value)\n                            }\n                          }\n                        })\n                      ])\n                    ])\n                  ]\n                )\n              }),\n              0\n            ),\n            _c(\"div\", { staticClass: \"answerRow\" }, [\n              _c(\"span\", { staticClass: \"optionsHead\" }, [_vm._v(\"Options\")]),\n              _c(\"button\", {\n                staticClass: \"optionEdit\",\n                class: _vm.answerEdition ? \"active\" : \"\",\n                on: {\n                  click: function($event) {\n                    _vm.answerEdition = !_vm.answerEdition\n                  }\n                }\n              }),\n              _c(\n                \"div\",\n                { class: !_vm.answerEdition ? \"height0\" : \"\" },\n                _vm._l(_vm.optionByQuestion(qId), function(options, optId) {\n                  return _c(\n                    \"div\",\n                    { key: optId },\n                    [\n                      _c(\"label\", [\n                        _vm._v(\"Option \" + _vm._s(parseInt(optId) + 1))\n                      ]),\n                      _vm._l(options, function(option, lang) {\n                        return _c(\"div\", { key: lang + optId }, [\n                          lang === _vm.langs[0]\n                            ? _c(\"div\", [\n                                _c(\"label\", [_vm._v(\"Illustration source\")]),\n                                _c(\"input\", {\n                                  directives: [\n                                    {\n                                      name: \"model\",\n                                      rawName: \"v-model\",\n                                      value: option.src,\n                                      expression: \"option.src\"\n                                    }\n                                  ],\n                                  attrs: { type: \"text\" },\n                                  domProps: { value: option.src },\n                                  on: {\n                                    input: function($event) {\n                                      if ($event.target.composing) {\n                                        return\n                                      }\n                                      _vm.$set(\n                                        option,\n                                        \"src\",\n                                        $event.target.value\n                                      )\n                                    }\n                                  }\n                                })\n                              ])\n                            : _vm._e(),\n                          lang === _vm.langs[0]\n                            ? _c(\"label\", [_vm._v(\"Text\")])\n                            : _vm._e(),\n                          _c(\"div\", { staticClass: \"tileLang\" }, [\n                            _vm._v(_vm._s(lang))\n                          ]),\n                          _c(\"input\", {\n                            directives: [\n                              {\n                                name: \"model\",\n                                rawName: \"v-model\",\n                                value: option.text,\n                                expression: \"option.text\"\n                              }\n                            ],\n                            attrs: { type: \"text\" },\n                            domProps: { value: option.text },\n                            on: {\n                              input: function($event) {\n                                if ($event.target.composing) {\n                                  return\n                                }\n                                _vm.$set(option, \"text\", $event.target.value)\n                              }\n                            }\n                          })\n                        ])\n                      })\n                    ],\n                    2\n                  )\n                }),\n                0\n              )\n            ])\n          ]\n        )\n      }),\n      _c(\"div\", [\n        _c(\"button\", { staticClass: \"add\", on: { click: _vm.addQuestion } }, [\n          _vm._v(\"Add question\")\n        ])\n      ])\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}