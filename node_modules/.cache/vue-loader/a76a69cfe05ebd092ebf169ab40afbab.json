{"remainingRequest":"C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Tointoin\\code\\lc\\quizz-perso\\src\\components\\questions.vue?vue&type=template&id=683d9aed&scoped=true&","dependencies":[{"path":"C:\\Users\\Tointoin\\code\\lc\\quizz-perso\\src\\components\\questions.vue","mtime":1569251019413},{"path":"C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Program Files\\nodejs\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"row\" }, [\n    _c(\n      \"div\",\n      _vm._l(_vm.config.languages, function(lang) {\n        return _c(\n          \"div\",\n          { key: lang, staticClass: \"col\" },\n          [\n            _c(\"div\", { staticClass: \"lang\" }, [\n              _vm._v(\"| \" + _vm._s(lang.toUpperCase()) + \" |\")\n            ]),\n            _vm._l(_vm.config.questions[lang], function(question, i) {\n              return _c(\"div\", { key: question.id, staticClass: \"questions\" }, [\n                _c(\"div\", { staticClass: \"input\" }, [\n                  _c(\"label\", [_vm._v(\"Question\")]),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.config.questions[lang][i].question,\n                        expression: \"config.questions[lang][i].question\"\n                      }\n                    ],\n                    attrs: {\n                      type: \"text\",\n                      placeholder: \"What do you want to ask ?\"\n                    },\n                    domProps: { value: _vm.config.questions[lang][i].question },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.config.questions[lang][i],\n                          \"question\",\n                          $event.target.value\n                        )\n                      }\n                    }\n                  })\n                ]),\n                _c(\n                  \"div\",\n                  { staticClass: \"input\" },\n                  [\n                    _c(\"label\", [_vm._v(\"Redirecto to\")]),\n                    _c(\"NextQuestion\", {\n                      attrs: {\n                        config: _vm.config,\n                        lang: lang,\n                        that: question,\n                        i: i\n                      },\n                      on: {\n                        \"next-update\": function($event) {\n                          return _vm.sync(\"next\", i, lang)\n                        }\n                      }\n                    })\n                  ],\n                  1\n                ),\n                _c(\"div\", { staticClass: \"input\" }, [\n                  _c(\"label\", [_vm._v(\"Collumns - Rows\")]),\n                  _c(\"div\", { staticClass: \"dualInput\" }, [\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.config.questions[lang][i].col,\n                          expression: \"config.questions[lang][i].col\"\n                        }\n                      ],\n                      attrs: { type: \"number\", placeholder: \"Collumns\" },\n                      domProps: { value: _vm.config.questions[lang][i].col },\n                      on: {\n                        input: [\n                          function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.config.questions[lang][i],\n                              \"col\",\n                              $event.target.value\n                            )\n                          },\n                          function($event) {\n                            return _vm.sync(\"col\", i, lang)\n                          }\n                        ]\n                      }\n                    }),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.config.questions[lang][i].row,\n                          expression: \"config.questions[lang][i].row\"\n                        }\n                      ],\n                      attrs: { type: \"number\", placeholder: \"Rows\" },\n                      domProps: { value: _vm.config.questions[lang][i].row },\n                      on: {\n                        input: [\n                          function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.config.questions[lang][i],\n                              \"row\",\n                              $event.target.value\n                            )\n                          },\n                          function($event) {\n                            return _vm.sync(\"row\", i, lang)\n                          }\n                        ]\n                      }\n                    })\n                  ])\n                ]),\n                _c(\"div\", { staticClass: \"input\" }, [\n                  _c(\"label\", [_vm._v(\"Min - Max\")]),\n                  _c(\"div\", { staticClass: \"dualInput\" }, [\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.config.questions[lang][i].min,\n                          expression: \"config.questions[lang][i].min\"\n                        }\n                      ],\n                      attrs: { type: \"number\", placeholder: \"Min\" },\n                      domProps: { value: _vm.config.questions[lang][i].min },\n                      on: {\n                        input: [\n                          function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.config.questions[lang][i],\n                              \"min\",\n                              $event.target.value\n                            )\n                          },\n                          function($event) {\n                            return _vm.sync(\"min\", i, lang)\n                          }\n                        ]\n                      }\n                    }),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.config.questions[lang][i].max,\n                          expression: \"config.questions[lang][i].max\"\n                        }\n                      ],\n                      attrs: { type: \"number\", placeholder: \"Max\" },\n                      domProps: { value: _vm.config.questions[lang][i].max },\n                      on: {\n                        input: [\n                          function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.config.questions[lang][i],\n                              \"max\",\n                              $event.target.value\n                            )\n                          },\n                          function($event) {\n                            return _vm.sync(\"max\", i, lang)\n                          }\n                        ]\n                      }\n                    })\n                  ])\n                ]),\n                _c(\n                  \"div\",\n                  [\n                    _c(\"span\", [_vm._v(\"Answers\")]),\n                    _c(\"Answer\", {\n                      attrs: { config: _vm.config, lang: lang, i: i }\n                    })\n                  ],\n                  1\n                ),\n                _c(\"div\", { staticClass: \"removeQuestion\" }, [\n                  _c(\"button\", { on: { click: _vm.removeQuestion } }, [\n                    _vm._v(\"Remove question\")\n                  ])\n                ])\n              ])\n            }),\n            _c(\"div\", { staticClass: \"addQuestion\" }, [\n              _c(\"button\", { on: { click: _vm.newQuestion } }, [\n                _vm._v(\"New question\")\n              ])\n            ])\n          ],\n          2\n        )\n      }),\n      0\n    )\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}